#include <Adafruit_NeoPixel.h>

#include "mode.h"


//PROGMEM byte Mode::rainbow_pallet[][3] = {
//  0, 255, 0, 3, 252, 0, 6, 249, 0, 9, 246, 0, 12, 243, 0, 15, 240, 0, 18, 237, 0, 21, 234, 0,
//  24, 231, 0, 27, 228, 0, 30, 225, 0, 33, 222, 0, 36, 219, 0, 39, 216, 0, 42, 213, 0, 45, 210, 0,
//  48, 207, 0, 51, 204, 0, 54, 201, 0, 57, 198, 0, 60, 195, 0, 63, 192, 0, 66, 189, 0, 69, 186, 0,
//  72, 183, 0, 75, 180, 0, 78, 177, 0, 81, 174, 0, 84, 171, 0, 87, 168, 0, 90, 165, 0, 93, 162, 0,
//  96, 159, 0, 99, 156, 0, 102, 153, 0, 105, 150, 0, 108, 147, 0, 111, 144, 0, 114, 141, 0, 117, 138, 0,
//  120, 135, 0, 123, 132, 0, 126, 129, 0, 129, 126, 0, 132, 123, 0, 135, 120, 0, 138, 117, 0, 141, 114, 0,
//  144, 111, 0, 147, 108, 0, 150, 105, 0, 153, 102, 0, 156, 99, 0, 159, 96, 0, 162, 93, 0, 165, 90, 0,
//  168, 87, 0, 171, 84, 0, 174, 81, 0, 177, 78, 0, 180, 75, 0, 183, 72, 0, 186, 69, 0, 189, 66, 0,
//  192, 63, 0, 195, 60, 0, 198, 57, 0, 201, 54, 0, 204, 51, 0, 207, 48, 0, 210, 45, 0, 213, 42, 0,
//  216, 39, 0, 219, 36, 0, 222, 33, 0, 225, 30, 0, 228, 27, 0, 231, 24, 0, 234, 21, 0, 237, 18, 0,
//  240, 15, 0, 243, 12, 0, 246, 9, 0, 249, 6, 0, 252, 3, 0, 255, 0, 0, 252, 0, 3, 249, 0, 6,
//  246, 0, 9, 243, 0, 12, 240, 0, 15, 237, 0, 18, 234, 0, 21, 231, 0, 24, 228, 0, 27, 225, 0, 30,
//  222, 0, 33, 219, 0, 36, 216, 0, 39, 213, 0, 42, 210, 0, 45, 207, 0, 48, 204, 0, 51, 201, 0, 54,
//  198, 0, 57, 195, 0, 60, 192, 0, 63, 189, 0, 66, 186, 0, 69, 183, 0, 72, 180, 0, 75, 177, 0, 78,
//  174, 0, 81, 171, 0, 84, 168, 0, 87, 165, 0, 90, 162, 0, 93, 159, 0, 96, 156, 0, 99, 153, 0, 102,
//  150, 0, 105, 147, 0, 108, 144, 0, 111, 141, 0, 114, 138, 0, 117, 135, 0, 120, 132, 0, 123, 129, 0, 126,
//  126, 0, 129, 123, 0, 132, 120, 0, 135, 117, 0, 138, 114, 0, 141, 111, 0, 144, 108, 0, 147, 105, 0, 150,
//  102, 0, 153, 99, 0, 156, 96, 0, 159, 93, 0, 162, 90, 0, 165, 87, 0, 168, 84, 0, 171, 81, 0, 174,
//  78, 0, 177, 75, 0, 180, 72, 0, 183, 69, 0, 186, 66, 0, 189, 63, 0, 192, 60, 0, 195, 57, 0, 198,
//  54, 0, 201, 51, 0, 204, 48, 0, 207, 45, 0, 210, 42, 0, 213, 39, 0, 216, 36, 0, 219, 33, 0, 222,
//  30, 0, 225, 27, 0, 228, 24, 0, 231, 21, 0, 234, 18, 0, 237, 15, 0, 240, 12, 0, 243, 9, 0, 246,
//  6, 0, 249, 3, 0, 252, 0, 0, 255, 0, 3, 252, 0, 6, 249, 0, 9, 246, 0, 12, 243, 0, 15, 240,
//  0, 18, 237, 0, 21, 234, 0, 24, 231, 0, 27, 228, 0, 30, 225, 0, 33, 222, 0, 36, 219, 0, 39, 216,
//  0, 42, 213, 0, 45, 210, 0, 48, 207, 0, 51, 204, 0, 54, 201, 0, 57, 198, 0, 60, 195, 0, 63, 192,
//  0, 66, 189, 0, 69, 186, 0, 72, 183, 0, 75, 180, 0, 78, 177, 0, 81, 174, 0, 84, 171, 0, 87, 168,
//  0, 90, 165, 0, 93, 162, 0, 96, 159, 0, 99, 156, 0, 102, 153, 0, 105, 150, 0, 108, 147, 0, 111, 144,
//  0, 114, 141, 0, 117, 138, 0, 120, 135, 0, 123, 132, 0, 126, 129, 0, 129, 126, 0, 132, 123, 0, 135, 120,
//  0, 138, 117, 0, 141, 114, 0, 144, 111, 0, 147, 108, 0, 150, 105, 0, 153, 102, 0, 156, 99, 0, 159, 96,
//  0, 162, 93, 0, 165, 90, 0, 168, 87, 0, 171, 84, 0, 174, 81, 0, 177, 78, 0, 180, 75, 0, 183, 72,
//  0, 186, 69, 0, 189, 66, 0, 192, 63, 0, 195, 60, 0, 198, 57, 0, 201, 54, 0, 204, 51, 0, 207, 48,
//  0, 210, 45, 0, 213, 42, 0, 216, 39, 0, 219, 36, 0, 222, 33, 0, 225, 30, 0, 228, 27, 0, 231, 24,
//  0, 234, 21, 0, 237, 18, 0, 240, 15, 0, 243, 12, 0, 246, 9, 0, 249, 6, 0, 252, 3, 0, 255, 0
//};

unsigned int Mode::scale(unsigned int num, unsigned int natural_max, unsigned int target_max) {
  unsigned long upper = (unsigned long)(num) * target_max;
  return (unsigned int)(upper / natural_max);
}

void Mode::show() {
  uint8_t brightness = 128;//scale(analogRead(A0), 1024, 255);
  strip.setBrightness(brightness);
  strip.show();
}

uint32_t Mode::Wheel(byte WheelPos) {
  return Wheel(WheelPos, 255);
}

uint32_t Mode::Wheel(byte WheelPos, byte brightness) {
  uint8_t r, g, b;

  if(WheelPos < 85) {
    r = WheelPos * 3;
    g = 255 - WheelPos * 3;
    b = 0;
  } 
  else if(WheelPos < 170) {
    WheelPos -= 85;

    r = 255 - WheelPos * 3;
    g = 0;
    b = WheelPos * 3;
  } 
  else {
    WheelPos -= 170;

    r = 0;
    g = WheelPos * 3;
    b = 255 - WheelPos * 3;
  }
  return strip.Color(r * brightness >> 8, g * brightness >> 8, b * brightness >> 8);
}





